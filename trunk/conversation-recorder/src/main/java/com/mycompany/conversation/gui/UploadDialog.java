/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * UploadDialog.java
 *
 * Created on Feb 10, 2010, 1:03:05 PM
 */

package com.mycompany.conversation.gui;

import com.mycompany.conversation.AudioRecordingState;
import com.mycompany.conversation.ConversationController;
import com.mycompany.conversation.PropertiesStorage;
import com.mycompany.conversation.UploadListener;
import com.mycompany.conversation.UploadState;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import org.jdesktop.swingx.JXErrorPane;

/**
 *
 * @author ryan
 */
public class UploadDialog extends javax.swing.JDialog implements UploadListener {

    private ConversationController controller;
    private PropertiesStorage propStorage;
    
    /** Creates new form UploadDialog */
    public UploadDialog(ConversationController controller, final PropertiesStorage propStorage, java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.controller = controller;
        this.propStorage = propStorage;
        this.controller.addUploadListener(this);
    }


   public void uploadChange(UploadState state) {
        if (state.getUploadURL() != null) {
            uploadComplete(state.getUploadURL());
        } else {
            this.overallProgressBar.setValue(state.getOverallPercentComplete());
            this.taskProgressBar.setString(state.getMinorTaskName());
            this.taskProgressBar.setStringPainted(true);
            taskProgressBar.setIndeterminate(state.isMinorTaskIndeterminate());
            if (!state.isMinorTaskIndeterminate()) {
                this.taskProgressBar.setValue(state.getMinorTaskPercentComplete());
            }


        }
    }
    private void uploadComplete(String uploadURL) {
        uploadURLEditorPane.setText(createUploadHtml(uploadURL));
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        uploadPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        serverComboBox = new javax.swing.JComboBox();
        uploadButton = new javax.swing.JButton();
        taskProgressBar = new javax.swing.JProgressBar();
        overallProgressBar = new javax.swing.JProgressBar();
        uploadCancelButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        uploadURLEditorPane = new javax.swing.JEditorPane();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        uploadPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Upload Conversation"));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel5.setText("Server");

        serverComboBox.setEditable(true);
        serverComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "http://localhost:5984/greenbridge" }));
        serverComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverComboBoxActionPerformed(evt);
            }
        });

        uploadButton.setText("Upload");
        uploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadButtonActionPerformed(evt);
            }
        });

        uploadCancelButton.setText("Cancel");

        jLabel8.setText("Task");

        jLabel9.setText("Overall");

        jLabel7.setText("URL");

        jScrollPane1.setBorder(null);

        uploadURLEditorPane.setContentType("text/html");
        uploadURLEditorPane.setEditable(false);
        jScrollPane1.setViewportView(uploadURLEditorPane);

        javax.swing.GroupLayout uploadPanelLayout = new javax.swing.GroupLayout(uploadPanel);
        uploadPanel.setLayout(uploadPanelLayout);
        uploadPanelLayout.setHorizontalGroup(
            uploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(uploadPanelLayout.createSequentialGroup()
                .addGroup(uploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(uploadPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(serverComboBox, 0, 420, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(uploadButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, uploadPanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(uploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(uploadPanelLayout.createSequentialGroup()
                                .addGroup(uploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(uploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(overallProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
                                    .addComponent(taskProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(uploadCancelButton))
                            .addGroup(uploadPanelLayout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        uploadPanelLayout.setVerticalGroup(
            uploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(uploadPanelLayout.createSequentialGroup()
                .addGroup(uploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(serverComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(uploadButton))
                .addGap(18, 18, 18)
                .addGroup(uploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(uploadCancelButton)
                    .addGroup(uploadPanelLayout.createSequentialGroup()
                        .addGroup(uploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8)
                            .addComponent(taskProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(uploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(overallProgressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(uploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jButton1.setText("Close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(uploadPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(uploadPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void serverComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverComboBoxActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_serverComboBoxActionPerformed

    private void uploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadButtonActionPerformed
        uploadButton.setEnabled(false);
        new Uploader().execute();
}//GEN-LAST:event_uploadButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        this.dispose();
    
    }//GEN-LAST:event_jButton1ActionPerformed
        private class Uploader extends SwingWorker<String,Void> {

            @Override
            protected String doInBackground()  {
                try {
                    return controller.uploadConversation((String) serverComboBox.getSelectedItem());
                } catch (final Exception e) {
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            overallProgressBar.setValue(0);
                            taskProgressBar.setStringPainted(false);
                            taskProgressBar.setIndeterminate(false);
                            taskProgressBar.setValue(0);
                            JXErrorPane.showDialog(e);
                        }
                    });
                    return e.getMessage();
                }
            }

            @Override
            protected void done() {
                try {
                    String location = get();
                    uploadURLEditorPane.setText(createUploadHtml(location));
                    uploadButton.setEnabled(true);
                    taskProgressBar.setStringPainted(false);
                    taskProgressBar.setIndeterminate(false);
                    taskProgressBar.setValue(100);
                    overallProgressBar.setValue(100);
                    propStorage.storeProperty("uploadServerUrl", (String)serverComboBox.getSelectedItem());
                } catch (Exception ex) {
                    
                }
            }


        }


    private String createUploadHtml(String url) {
        return "<html><a href=\"" + url + "\">" + url + "</a></html>";
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JProgressBar overallProgressBar;
    private javax.swing.JComboBox serverComboBox;
    private javax.swing.JProgressBar taskProgressBar;
    private javax.swing.JButton uploadButton;
    private javax.swing.JButton uploadCancelButton;
    private javax.swing.JPanel uploadPanel;
    private javax.swing.JEditorPane uploadURLEditorPane;
    // End of variables declaration//GEN-END:variables

}
